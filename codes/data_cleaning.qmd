---
title: "DA401"
author: "Jason Tran"
format: pdf
editor: visual
---

# Data Cleaning 

## CES Public Use Microdata

```{r}
# Load required libraries
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
library(magrittr)
library(readr)
library(lubridate)

# Define the directory containing all data files
data_dir <- "C:/Users/vanho/Desktop/DA 401/all data"

# List all files in the directory
all_files <- list.files(data_dir, full.names = TRUE)

# Helper function to extract year and quarter from the file names
extract_year_quarter <- function(file_path) {
  file_name <- basename(file_path)
  
  # Extract the two-digit year and adjust accordingly
  year <- as.numeric(str_extract(file_name, "\\d{2}"))
  year <- ifelse(year > 50, 1900 + year, 2000 + year)  # Handle two-digit year format
  
  # Extract quarter information if present
  quarter <- ifelse(str_detect(file_name, "Q[1-4]|q[1-4]"), as.numeric(str_extract(file_name, "[1-4]")), NA)
  
  # Adjust for files with "x" indicating different releases
  x_indicator <- str_detect(file_name, "x")
  if (x_indicator) {
    # Assign quarter for files labeled with 'x'
    quarter <- ifelse(is.na(quarter), 1, quarter)
  } else {
    quarter <- ifelse(is.na(quarter), 5, quarter)  # Assign 5 for files from the fifth quarter
  }
  
  return(list(year = year, quarter = quarter))
}

# Function to clean and prepare FMLI files
clean_fmli <- function(file_path) {
  info <- extract_year_quarter(file_path)
  
  # Error handling for file reading
  tryCatch({
    data <- fread(file_path, na.strings = c("", ".", "NA"))
    
    # Convert column names to lowercase and select key variables
    data <- data %>%
      rename_with(~ tolower(.x)) %>%
      mutate(
        newid = as.character(newid),  # Ensure newid is a character
        year = info$year,
        quarter = info$quarter,
        fsize = coalesce(fam_size, NA),
        urbrur = coalesce(bls_urbn, NA),
        gender = coalesce(sex_ref, NA),
        fincbtxm = coalesce(fincbtxm, NA),
        popwt = finlwt21
      ) %>%
      select(newid, year, quarter, finlwt21, fsize, urbrur, gender, fincbtxm, popwt)
    
    return(data)
  }, error = function(e) {
    message(paste("Error reading FMLI file:", file_path, "-", e$message))
    return(NULL)
  })
}

# Function to clean MTBI files (Monthly Expenditure - Gasoline)
clean_mtbi <- function(file_path) {
  info <- extract_year_quarter(file_path)
  ucc_codes <- c("470111", "470113")  # UCC codes for gasoline expenditures
  
  tryCatch({
    fread(file_path, na.strings = c("", ".", "NA")) %>%
      rename_with(~ tolower(.x)) %>%
      filter(ucc %in% ucc_codes) %>%
      mutate(
        newid = as.character(newid),  # Ensure newid is a character
        year = info$year,
        quarter = info$quarter
      ) %>%
      group_by(newid, year, quarter) %>%
      summarise(gasoline_expenditure = sum(cost, na.rm = TRUE), .groups = 'drop')
  }, error = function(e) {
    message(paste("Error reading MTBI file:", file_path, "-", e$message))
    return(NULL)
  })
}

# Function to clean NTAXI files (Post-Tax Income)
clean_ntaxi <- function(file_path) {
  info <- extract_year_quarter(file_path)
  
  tryCatch({
    fread(file_path, na.strings = c("", ".", "NA")) %>%
      rename_with(~ tolower(.x)) %>%
      mutate(
        newid = as.character(newid),  # Ensure newid is a character
        year = info$year,
        quarter = info$quarter
      ) %>%
      filter(year >= 2013) %>%  # Only include data from 2013 onwards
      select(newid, year, quarter, tax_unit, wage_hd, wage_sp, othtxinc, taxpens, fica_py, fica_cy)
  }, error = function(e) {
    message(paste("Error reading NTAXI file:", file_path, "-", e$message))
    return(NULL)
  })
}

# Wrapper function to apply the correct cleaning function based on file type
clean_data_file <- function(file_path) {
  if (grepl("fmli", file_path, ignore.case = TRUE)) {
    return(clean_fmli(file_path))
  } else if (grepl("mtbi", file_path, ignore.case = TRUE)) {
    return(clean_mtbi(file_path))
  } else if (grepl("ntaxi", file_path, ignore.case = TRUE)) {
    return(clean_ntaxi(file_path))
  }
  NULL
}

# Apply the cleaning function to all relevant files and merge the results
cleaned_data <- lapply(all_files, clean_data_file) %>%
  bind_rows() %>%

  mutate(across(everything(), ~replace_na(.x, NA)))


```

## California Gas Prices Data

```{r}
# Load California Gas Prices Dataset directly
gas_prices_file_path <- file.path(data_dir, "Cali_gas_prices.csv")

# Read in California gas prices data
california_gas_prices <- read_csv(gas_prices_file_path, na = c("", ".", "NA"))

# Assuming the columns are `date` and `price`, adjust accordingly
california_gas_prices <- california_gas_prices %>%
  rename(
    Date = date,  
    Gas_price = price  
  ) %>%
  mutate(
    date = as.Date(date, format = "%Y-%m-%d"),  # Assuming date format is YYYY-MM-DD
    year = year(date),  # Extract year from date
    quarter = quarter(date)  # Extract quarter from date
  ) %>%
  group_by(year, quarter) %>%
  summarise(average_gas_price = mean(gas_price, na.rm = TRUE), .groups = 'drop') %>%
  drop_na(year, quarter, average_gas_price)

# Merge cleaned CEX data with California Gas Prices
final_data <- cleaned_data %>%
  left_join(california_gas_prices, by = c("year", "quarter"))  # Merge based on year and quarter to add gas prices to each row

# Handle NA values after merging
final_data <- final_data %>%
  mutate(across(everything(), ~ replace_na(.x, 0)))  # Replace remaining NA values with 0

# Save the final merged dataset
write_csv(final_data, "final_cex_with_gas_prices.csv")
```
