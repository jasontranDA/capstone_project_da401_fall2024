y = "Average Gasoline Expenditure (in $)",
color = "Tax Period"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Perform mean imputation for any remaining missing values
final_data <- final_data%>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
View(final_data)
# Load required libraries
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
library(magrittr)
library(readr)
library(lubridate)
library(kableExtra)
library(ggplot2)
library(corrplot)
library(lmtest)
library(sandwich)
# Load required libraries
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
library(magrittr)
library(readr)
library(lubridate)
library(kableExtra)
library(ggplot2)
library(corrplot)
library(lmtest)
# Impute gasoline expenditure using a regression model
library(mice)
# Load required libraries
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
library(magrittr)
library(readr)
library(lubridate)
library(kableExtra)
library(ggplot2)
library(corrplot)
library(lmtest)
# Define the directory containing all data files
data_dir <- "C:/Users/vanho/Desktop/DA 401/all data"
# List all files in the directory
all_files <- list.files(data_dir, full.names = TRUE)
# Helper function to extract year and quarter from the file names
extract_year_quarter <- function(file_path) {
file_name <- basename(file_path)
# Extract the two-digit year and adjust accordingly
year <- as.numeric(str_extract(file_name, "\\d{2}"))
year <- ifelse(year > 50, 1900 + year, 2000 + year)  # Handle two-digit year format
# Extract quarter information if present
quarter <- ifelse(str_detect(file_name, "Q[1-4]|q[1-4]"), as.numeric(str_extract(file_name, "[1-4]")), NA)
# Adjust for files with "x" indicating different releases
x_indicator <- str_detect(file_name, "x")
if (x_indicator) {
# Assign quarter for files labeled with 'x'
quarter <- ifelse(is.na(quarter), 1, quarter)
} else {
quarter <- ifelse(is.na(quarter), 5, quarter)  # Assign 5 for files from the fifth quarter
}
return(list(year = year, quarter = quarter))
}
# Function to clean and prepare FMLI files
clean_fmli <- function(file_path) {
info <- extract_year_quarter(file_path)
# Error handling for file reading
tryCatch({
data <- fread(file_path, na.strings = c("", ".", "NA"))
# Convert column names to lowercase and select key variables
data <- data %>%
rename_with(~ tolower(.x)) %>%
mutate(
newid = as.character(newid),  # Ensure newid is a character
year = info$year,
quarter = info$quarter,
fsize = coalesce(fam_size, NA),
urbrur = coalesce(bls_urbn, NA),
gender = coalesce(sex_ref, NA),
fincbtxm = coalesce(fincbtxm, NA),
popwt = finlwt21
) %>%
select(newid, year, quarter, finlwt21, fsize, urbrur, gender, fincbtxm, popwt, educa2, )
return(data)
}, error = function(e) {
message(paste("Error reading FMLI file:", file_path, "-", e$message))
return(NULL)
})
}
# Function to clean MTBI files (Monthly Expenditure - Gasoline)
clean_mtbi <- function(file_path) {
info <- extract_year_quarter(file_path)
ucc_codes <- c("470111")  # UCC codes for gasoline expenditures
tryCatch({
fread(file_path, na.strings = c("", ".", "NA")) %>%
rename_with(~ tolower(.x)) %>%
filter(ucc %in% ucc_codes) %>%
mutate(
newid = as.character(newid),  # Ensure newid is a character
year = info$year,
quarter = info$quarter
) %>%
group_by(newid, year, quarter) %>%
summarise(gasoline_expenditure = sum(cost, na.rm = TRUE), .groups = 'drop')
}, error = function(e) {
message(paste("Error reading MTBI file:", file_path, "-", e$message))
return(NULL)
})
}
# Function to clean NTAXI files (Post-Tax Income)
#clean_ntaxi <- function(file_path) {
# info <- extract_year_quarter(file_path)
#tryCatch({
# fread(file_path, na.strings = c("", ".", "NA")) %>%
#  rename_with(~ tolower(.x)) %>%
##  newid = as.character(newid),  # Ensure newid is a character
#  year = info$year,
#    quarter = info$quarter
#  ) %>%
#   filter(year >= 2013) %>%  # Only include data from 2013 onwards
#   select(newid, year, quarter, tax_unit, wage_hd, wage_sp, othtxinc, taxpens, #fica_py, fica_cy)
# }, error = function(e) {
#   message(paste("Error reading NTAXI file:", file_path, "-", e$message))
#  return(NULL)
#  })
#}
# Wrapper function to apply the correct cleaning function based on file type
clean_data_file <- function(file_path) {
if (grepl("fmli", file_path, ignore.case = TRUE)) {
return(clean_fmli(file_path))
} else if (grepl("mtbi", file_path, ignore.case = TRUE)) {
return(clean_mtbi(file_path))
# } else if (grepl("ntaxi", file_path, ignore.case = TRUE)) {
#  return(clean_ntaxi(file_path))
}
NULL
}
# Apply the cleaning function to all relevant files and merge the results
cleaned_data <- lapply(all_files, clean_data_file) %>%
bind_rows() %>%
mutate(across(everything(), ~replace_na(.x, NA)))
# Load California Gas Prices Dataset directly
gas_prices_file_path <- file.path(data_dir, "Cali_gas_prices.csv")
# Read in California gas prices data
california_gas_prices <- read_csv(gas_prices_file_path, na = c("", ".", "NA"))
# Clean the California gas prices dataset
california_gas_prices <- california_gas_prices %>%
mutate(
Date = mdy(Date),  # Convert Date column from character to Date type (assuming format is "Month Day, Year")
year = as.integer(year(Date)),  # Extract year as integer
quarter = as.integer(quarter(Date))  # Extract quarter as integer
) %>%
group_by(year, quarter) %>%
summarise(average_gas_price = mean(Gas_prices, na.rm = TRUE), .groups = 'drop')
# Cleaned CEX data: Ensure 'year' and 'quarter' are integers
cleaned_data <- cleaned_data %>%
mutate(
year = as.integer(year),
quarter = as.integer(quarter)
)
# Merge cleaned CEX data with California Gas Prices
final_data <- cleaned_data %>%
full_join(california_gas_prices, by = c("year", "quarter"))  # Merge based on year and quarter to add gas prices to each row
# Print the structure of the final dataset
str(final_data)
# Poverty threshold data as per US Census in 2023
poverty_thresholds <- data.frame(
family_size = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
threshold = c(15480, 19680, 24230, 31200, 36990, 41860, 47670, 52850, 62900)
)
# Adding the income level poverty variable
final_data <- final_data %>%
left_join(poverty_thresholds, by = c("fsize" = "family_size")) %>%
mutate(
income_level_poverty = ifelse(fincbtxm <= threshold, 1, 0)
) %>%
select(-threshold)  # Remove the threshold column as it is no longer needed
# Add the post-tax period variable based on California Cap-and-Trade starting in 2015
final_data <- final_data %>%
mutate(
post_tax_period = ifelse(year >= 2015, 1, 0)
)
# Remove quarter 5
final_data <- final_data %>%
filter(quarter <5)
# Rename education categories in educa2
final_data <- final_data %>%
mutate(educa2 = case_when(
educa2 == 0 ~ "Unknown",
educa2 == 1 ~ "Elementary (1-8 yrs.)",
educa2 == 2 ~ "High School (1-4 yrs.), No Diploma",
educa2 == 3 ~ "High School Graduate",
educa2 == 4 ~ "Some College, No Degree",
educa2 == 5 ~ "College Graduate (4 yrs.)",
educa2 == 6 ~ "More than 4 yrs. College",
educa2 == 7 ~ "Never Attended School",
educa2 == 10 ~ "Nursery, Kindergarten, Elementary (Grades 1-8)",
educa2 == 11 ~ "High School (Grades 9-12), No Diploma",
educa2 == 12 ~ "High School Graduate",
educa2 == 13 ~ "Some College, No Degree",
educa2 == 14 ~ "Associate's Degree",
educa2 == 15 ~ "Bachelor's Degree",
educa2 == 16 ~ "Master's, Professional, or Doctorate",
educa2 == 17 ~ "Professional or Doctorate Degree",
TRUE ~ "Other"
))
# Perform mean imputation for any remaining missing values
final_data <- final_data%>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Generate summary statistics for key variables
summary_stats <- final_data %>%
summarise(
avg_gas_prices = mean(average_gas_price, na.rm = TRUE),
avg_income = mean(fincbtxm, na.rm = TRUE),
proportion_poverty = mean(income_level_poverty, na.rm = TRUE),
post_tax_period_prop = mean(post_tax_period, na.rm = TRUE),
avg_gas_spending = mean(gasoline_expenditure, na.rm = TRUE),
)
# Print the summary statistics table in a professional format
summary_stats %>%
kable(caption = "Summary Statistics for Key Variables") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
# Plot histogram for household income
ggplot(final_data, aes(x = fincbtxm)) +
geom_histogram(fill = "#1f77b4", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Household Income",
x = "Household Income (in $)",
y = "Frequency"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Plot distribution of gasoline expenditure
ggplot(final_data, aes(x = gasoline_expenditure)) +
geom_histogram(fill = "tomato", color = "black") +
ggtitle("Distribution of Gasoline Expenditures") +
xlab("Gasoline Expenditure (in $)") +
ylab("Frequency") +
theme_minimal()
# Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditures by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
# Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.5, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditures by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
# Load required libraries
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
library(magrittr)
library(readr)
library(lubridate)
library(kableExtra)
library(ggplot2)
library(corrplot)
library(lmtest)
# Define the directory containing all data files
data_dir <- "C:/Users/vanho/Desktop/DA 401/all data"
# List all files in the directory
all_files <- list.files(data_dir, full.names = TRUE)
# Helper function to extract year and quarter from the file names
extract_year_quarter <- function(file_path) {
file_name <- basename(file_path)
# Extract the two-digit year and adjust accordingly
year <- as.numeric(str_extract(file_name, "\\d{2}"))
year <- ifelse(year > 50, 1900 + year, 2000 + year)  # Handle two-digit year format
# Extract quarter information if present
quarter <- ifelse(str_detect(file_name, "Q[1-4]|q[1-4]"), as.numeric(str_extract(file_name, "[1-4]")), NA)
# Adjust for files with "x" indicating different releases
x_indicator <- str_detect(file_name, "x")
if (x_indicator) {
# Assign quarter for files labeled with 'x'
quarter <- ifelse(is.na(quarter), 1, quarter)
} else {
quarter <- ifelse(is.na(quarter), 5, quarter)  # Assign 5 for files from the fifth quarter
}
return(list(year = year, quarter = quarter))
}
# Function to clean and prepare FMLI files
clean_fmli <- function(file_path) {
info <- extract_year_quarter(file_path)
# Error handling for file reading
tryCatch({
data <- fread(file_path, na.strings = c("", ".", "NA"))
# Convert column names to lowercase and select key variables
data <- data %>%
rename_with(~ tolower(.x)) %>%
mutate(
newid = as.character(newid),  # Ensure newid is a character
year = info$year,
quarter = info$quarter,
fsize = coalesce(fam_size, NA),
urbrur = coalesce(bls_urbn, NA),
gender = coalesce(sex_ref, NA),
fincbtxm = coalesce(fincbtxm, NA),
popwt = finlwt21
) %>%
select(newid, year, quarter, finlwt21, fsize, urbrur, gender, fincbtxm, popwt, educa2, )
return(data)
}, error = function(e) {
message(paste("Error reading FMLI file:", file_path, "-", e$message))
return(NULL)
})
}
# Function to clean MTBI files (Monthly Expenditure - Gasoline)
clean_mtbi <- function(file_path) {
info <- extract_year_quarter(file_path)
ucc_codes <- c("470111")  # UCC codes for gasoline expenditures
tryCatch({
fread(file_path, na.strings = c("", ".", "NA")) %>%
rename_with(~ tolower(.x)) %>%
filter(ucc %in% ucc_codes) %>%
mutate(
newid = as.character(newid),  # Ensure newid is a character
year = info$year,
quarter = info$quarter
) %>%
group_by(newid, year, quarter) %>%
summarise(gasoline_expenditure = sum(cost, na.rm = TRUE), .groups = 'drop')
}, error = function(e) {
message(paste("Error reading MTBI file:", file_path, "-", e$message))
return(NULL)
})
}
# Function to clean NTAXI files (Post-Tax Income)
#clean_ntaxi <- function(file_path) {
# info <- extract_year_quarter(file_path)
#tryCatch({
# fread(file_path, na.strings = c("", ".", "NA")) %>%
#  rename_with(~ tolower(.x)) %>%
##  newid = as.character(newid),  # Ensure newid is a character
#  year = info$year,
#    quarter = info$quarter
#  ) %>%
#   filter(year >= 2013) %>%  # Only include data from 2013 onwards
#   select(newid, year, quarter, tax_unit, wage_hd, wage_sp, othtxinc, taxpens, #fica_py, fica_cy)
# }, error = function(e) {
#   message(paste("Error reading NTAXI file:", file_path, "-", e$message))
#  return(NULL)
#  })
#}
# Wrapper function to apply the correct cleaning function based on file type
clean_data_file <- function(file_path) {
if (grepl("fmli", file_path, ignore.case = TRUE)) {
return(clean_fmli(file_path))
} else if (grepl("mtbi", file_path, ignore.case = TRUE)) {
return(clean_mtbi(file_path))
# } else if (grepl("ntaxi", file_path, ignore.case = TRUE)) {
#  return(clean_ntaxi(file_path))
}
NULL
}
# Apply the cleaning function to all relevant files and merge the results
cleaned_data <- lapply(all_files, clean_data_file) %>%
bind_rows() %>%
mutate(across(everything(), ~replace_na(.x, NA)))
# Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditures by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
# Scatter plot of gasoline expenditure vs average gas price
ggplot(final_data, aes(x = average_gas_price, y = gasoline_expenditure)) +
geom_point(alpha = 0.6, color = "#1f77b4") +
geom_smooth(method = "lm", se = TRUE, color = "#d62728") +
labs(
title = "Impact of Average Gas Prices on Gasoline Expenditure",
x = "Average Gas Price (per gallon)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
## Violin plot of gasoline expenditure by tax period
ggplot(final_data_filtered, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditure by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
## Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditure by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
## Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.8, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditure by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
## Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditure by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
## Violin plot of gasoline expenditure by tax period
ggplot(final_data, aes(x = factor(post_tax_period), y = gasoline_expenditure, fill = factor(post_tax_period))) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, color = "black", alpha = 0.8) +
scale_fill_manual(values = c("#17becf", "#d62728")) +
labs(
title = "Gasoline Expenditure by Pre-Tax and Post-Tax Periods",
x = "Post Tax Period (0 = Pre, 1 = Post)",
y = "Gasoline Expenditure (in $)"
) +
theme_minimal(base_size = 10) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none")
# Define the Difference-in-Differences model without splitting dataset into two parts
did_model <- lm(
gasoline_expenditure ~ post_tax_period + gender + post_tax_period:gender +
urbrur + fsize +average_gas_price+income_level_poverty,
data = final_data
)
# View summary of the model
summary(did_model)
# Define the Difference-in-Differences model without splitting dataset into two parts
did_model <- lm(
gasoline_expenditure ~ post_tax_period + gender + post_tax_period:gender +
urbrur + fsize +average_gas_price+income_level_poverty+ educa2,
data = final_data
)
# View summary of the model
summary(did_model)
# Define the Difference-in-Differences model without splitting dataset into two parts
did_model <- lm(
gasoline_expenditure ~ post_tax_period + gender + post_tax_period:gender +
urbrur + fsize +average_gas_price+income_level_poverty,
data = final_data
)
# View model summary
summary(did_model)
install.packages("sandwich")
# Robust standard errors clustered by year
library(sandwich)
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Clustered standard errors to correct for heteroskedasticity and autocorrelation
cluster_se <- vcovHC(did_model, type = "HC1")
cluster_se_robust <- coeftest(did_model, vcov = cluster_se)
# Print summary with robust standard errors
print(cluster_se_robust)
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Clustered standard errors to correct for heteroskedasticity and autocorrelation
cluster_se <- vcovHC(did_model, type = "HC1")
cluster_se_robust <- coeftest(did_model, vcov = cluster_se)
# Print summary with robust standard errors
print(cluster_se_robust)
# Define the Difference-in-Differences model without splitting dataset into two parts
did_model <- lm(
gasoline_expenditure ~ post_tax_period + gender + post_tax_period:gender +
urbrur + fsize +average_gas_price+income_level_poverty,
data = final_data
)
# View model summary
summary(did_model)
